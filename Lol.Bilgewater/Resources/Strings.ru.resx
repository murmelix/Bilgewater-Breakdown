<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="All" xml:space="preserve">
    <value>все</value>
  </data>
  <data name="Assassin" xml:space="preserve">
    <value>убийца</value>
  </data>
  <data name="Assists" xml:space="preserve">
    <value>Передачи</value>
  </data>
  <data name="Champions" xml:space="preserve">
    <value>Чемпионы</value>
  </data>
  <data name="Charts" xml:space="preserve">
    <value>Диаграммы</value>
  </data>
  <data name="Close" xml:space="preserve">
    <value>Закрыть</value>
  </data>
  <data name="CS" xml:space="preserve">
    <value>CS</value>
  </data>
  <data name="DataProcessing" xml:space="preserve">
    <value>Обработка данных</value>
  </data>
  <data name="DataText1" xml:space="preserve">
    <value>Для того, чтобы обрабатывать данные бунт Апи, мы написали небольшую библиотеку, которая показывает отдельные объекты данных. Позже мы выяснили, что-то вроде этого уже существовали.</value>
  </data>
  <data name="DataText2" xml:space="preserve">
    <value>Чтобы загрузить много данных матч, мы написали небольшую программу консоли, берет на ключ API и области в качестве параметра. Вы можете запустить несколько экземпляров программы для того, чтобы ускорить процесс загрузки. Затем данные сжимаются для экономии места с библиотекой {0}</value>
  </data>
  <data name="DataText3" xml:space="preserve">
    <value>Чтобы извлечь важные данные с относительно полной информации матч мы написали вторую программу консоли. Это только извлекает все значения данных из матч-JSON-файлы, которые мы рассматривали для нашего анализа, как интересно. Для разбора JSON-файлов у нас есть библиотека {1} используется. Эти данные были затем инкубировали с библиотекой-protobuf последовательную. {0} является невероятно быстро и гладкий способ сериализации Google. &lt;br /&gt; После этого, у нас был только анализировать и хранить значения в малых выборок значений данных. База данных не было необходимости.</value>
  </data>
  <data name="Death" xml:space="preserve">
    <value>смерть</value>
  </data>
  <data name="Documentation" xml:space="preserve">
    <value>документация</value>
  </data>
  <data name="DurationStats" xml:space="preserve">
    <value>Длина Статистика матча</value>
  </data>
  <data name="Fighter" xml:space="preserve">
    <value>истребитель</value>
  </data>
  <data name="FirstBaron" xml:space="preserve">
    <value>барон</value>
  </data>
  <data name="FirstBlood" xml:space="preserve">
    <value>кровь</value>
  </data>
  <data name="FirstDrake" xml:space="preserve">
    <value>селезень</value>
  </data>
  <data name="FirstInhibitor" xml:space="preserve">
    <value>ингибитор</value>
  </data>
  <data name="FirstTower" xml:space="preserve">
    <value>башня</value>
  </data>
  <data name="Items" xml:space="preserve">
    <value>Предметы</value>
  </data>
  <data name="Kills" xml:space="preserve">
    <value>Убийств</value>
  </data>
  <data name="LetsGo" xml:space="preserve">
    <value>Пойдем</value>
  </data>
  <data name="LowesPickrate" xml:space="preserve">
    <value>Самая низкая ставка Пика</value>
  </data>
  <data name="LowestAvgCS" xml:space="preserve">
    <value>Самая низкая Среднее CS</value>
  </data>
  <data name="LowestWinrate" xml:space="preserve">
    <value>Самая низкая Винрейт</value>
  </data>
  <data name="Mage" xml:space="preserve">
    <value>маг</value>
  </data>
  <data name="Marksman" xml:space="preserve">
    <value>меткий стрелок</value>
  </data>
  <data name="Matchduration" xml:space="preserve">
    <value>длина</value>
  </data>
  <data name="MercPopularity" xml:space="preserve">
    <value>Наемник Популярность</value>
  </data>
  <data name="OnlyBilgewater" xml:space="preserve">
    <value>только Bilgewater</value>
  </data>
  <data name="Pickrate" xml:space="preserve">
    <value>Выберите скорость</value>
  </data>
  <data name="Presentation" xml:space="preserve">
    <value>презентация</value>
  </data>
  <data name="PresentationText1" xml:space="preserve">
    <value>Для дизайна сайта, мы используем {0} с темой. С начальной загрузки может быть относительно легко создать шикарный макет. Для диаграмм, мы выбрали для JavaScript библиотека, {1}. Это использование относительно комфортно, но мы должны были сделать небольшую корректировку, чтобы отобразить иконки на оси Х может.</value>
  </data>
  <data name="PresentationText2" xml:space="preserve">
    <value>Дополнительные технологии</value>
  </data>
  <data name="Region" xml:space="preserve">
    <value>область</value>
  </data>
  <data name="RoleStats" xml:space="preserve">
    <value>Производительность Статистика Роль</value>
  </data>
  <data name="Support" xml:space="preserve">
    <value>поддержка</value>
  </data>
  <data name="Tank" xml:space="preserve">
    <value>бак</value>
  </data>
  <data name="TearNote" xml:space="preserve">
    <value>Слеза представляет случаи, когда игрок не выбрать любой из mercanaries.</value>
  </data>
  <data name="Tools" xml:space="preserve">
    <value>Инструменты</value>
  </data>
  <data name="ToolsText1" xml:space="preserve">
    <value>Для развития мы в основном использовали {0}. Среда разработки Microsoft форма предоставляется бесплатно, при каких-коммерческих проектов. Это делает разработку веб-приложений MVC очень легко.</value>
  </data>
  <data name="ToolsText2" xml:space="preserve">
    <value>Кроме того, программа предлагает очень простой GIT-интеграции и возможность публиковать свой проект без осложнений на вашем {0}. Кроме того, каждый дополнительный библиотека может быть easyly уши с помощью NuGet интеграции в вашем проекте. Мы сделали это для всех наших внешних библиотек.</value>
  </data>
  <data name="TopAvgCS" xml:space="preserve">
    <value>Топ Среднее CS</value>
  </data>
  <data name="TopPickrate" xml:space="preserve">
    <value>Топ ставка Пика</value>
  </data>
  <data name="TopWinrate" xml:space="preserve">
    <value>Топ Винрейт</value>
  </data>
  <data name="Welcome" xml:space="preserve">
    <value>добро пожаловать</value>
  </data>
  <data name="WelcomeText1" xml:space="preserve">
    <value>С нашим вступлением на API-Challenge 2.0 мы хотели посвятить 1. возможных тем:</value>
  </data>
  <data name="WelcomeText2" xml:space="preserve">
    <value>Мы думали, о которых из информаций может быть интересно. Наша основная цель в том, чтобы проанализировать, какие наемники были наиболее популярны среди playerbase и если gamelength будут затронуты сильными приспешников.</value>
  </data>
  <data name="WelcomeText3" xml:space="preserve">
    <value>В дополнение мы добавили некоторые статистические данные из работы каждого чемпиона и пункта.</value>
  </data>
  <data name="Winrate" xml:space="preserve">
    <value>Шанс на победу</value>
  </data>
  <data name="ConclusionChampions" xml:space="preserve">
    <value>Самая большая разница по всем чемпионам является значительная потеря в CS повторяющийся. Все топ-фермеры в Трюмных Вод около 20% ниже, в ферме.</value>
  </data>
  <data name="ConclusionDuration" xml:space="preserve">
    <value>Продолжительность Трюмных Вод матчей defenitly быстрее. Большинство цели earlyier приняты, за исключением селезня.</value>
  </data>
  <data name="ConclusionMercPopularity" xml:space="preserve">
    <value>В ближнем бою наемники, кажется, более популярны, но винрейт будет справедливо распределены.Удивительно, большое количество игроков, не купить наемника.</value>
  </data>
  <data name="ConclusionRoles" xml:space="preserve">
    <value>Нет большой variancy на успех различных ролей. Малой нажатие на баке и истребителя.</value>
  </data>
</root>