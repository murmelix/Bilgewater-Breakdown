<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="All" xml:space="preserve">
    <value>Todo el mundo</value>
  </data>
  <data name="Assassin" xml:space="preserve">
    <value>Assassin</value>
  </data>
  <data name="Assists" xml:space="preserve">
    <value>asistida</value>
  </data>
  <data name="Champions" xml:space="preserve">
    <value>Campeones</value>
  </data>
  <data name="Charts" xml:space="preserve">
    <value>Gráficas</value>
  </data>
  <data name="Close" xml:space="preserve">
    <value>Cierre</value>
  </data>
  <data name="CS" xml:space="preserve">
    <value>CS</value>
  </data>
  <data name="DataProcessing" xml:space="preserve">
    <value>preparación de datos</value>
  </data>
  <data name="DataText2" xml:space="preserve">
    <value>Para cargar los datos de los partidos muchos, escribimos un programa de consola pequeña, que se hace cargo de la clave de API y una región como parámetro. Usted podría comenzar a varias instancias del programa con el fin de acelerar el proceso de descarga. A continuación, los datos se comprime para ahorrar espacio con la biblioteca {0}</value>
  </data>
  <data name="DataText3" xml:space="preserve">
    <value>Para extraer los datos importantes de la información relativamente completa partido, escribimos un segundo programa de la consola. Esto sólo ha extrae todos los valores de los datos desde el partido-JSON-Files, que hemos considerado para nuestro análisis de interesante. Para analizar el JSON-Files tenemos la biblioteca {1} utilizado. Los datos fueron serializados con la biblioteca-protobuf. {0} es un método muy rápido y elegante para la serialización de Google. &lt;br /&gt; Después de eso, sólo tuvimos que analizar y almacenar los valores en muestras pequeñas de los valores de datos. Una base de datos no era necesario.</value>
  </data>
  <data name="Death" xml:space="preserve">
    <value>fallecimiento</value>
  </data>
  <data name="Documentation" xml:space="preserve">
    <value>Documentación</value>
  </data>
  <data name="DurationStats" xml:space="preserve">
    <value>Estadísticas Partido Longitud</value>
  </data>
  <data name="Fighter" xml:space="preserve">
    <value>Luchador</value>
  </data>
  <data name="FirstBaron" xml:space="preserve">
    <value>Baron</value>
  </data>
  <data name="FirstBlood" xml:space="preserve">
    <value>sangre</value>
  </data>
  <data name="FirstDrake" xml:space="preserve">
    <value>dragon</value>
  </data>
  <data name="FirstInhibitor" xml:space="preserve">
    <value> inhibidor</value>
  </data>
  <data name="FirstTower" xml:space="preserve">
    <value>Torre</value>
  </data>
  <data name="Items" xml:space="preserve">
    <value>Artículos</value>
  </data>
  <data name="Kills" xml:space="preserve">
    <value>asesinatos</value>
  </data>
  <data name="LetsGo" xml:space="preserve">
    <value>Aquí vamos</value>
  </data>
  <data name="LowesPickrate" xml:space="preserve">
    <value>Más pequeña tasa de recogida</value>
  </data>
  <data name="LowestAvgCS" xml:space="preserve">
    <value>Promedio más pequeño CS</value>
  </data>
  <data name="LowestWinrate" xml:space="preserve">
    <value>Más pequeña tasa de ganar</value>
  </data>
  <data name="Marksman" xml:space="preserve">
    <value>Sagitario</value>
  </data>
  <data name="Matchduration" xml:space="preserve">
    <value>Duracion</value>
  </data>
  <data name="MercPopularity" xml:space="preserve">
    <value>popularidad Mercenario</value>
  </data>
  <data name="OnlyBilgewater" xml:space="preserve">
    <value>solo Bilgewater</value>
  </data>
  <data name="Pickrate" xml:space="preserve">
    <value>tasa de recogida</value>
  </data>
  <data name="Presentation" xml:space="preserve">
    <value>declaración</value>
  </data>
  <data name="PresentationText1" xml:space="preserve">
    <value>Para el diseño del sitio, utilizamos {0} con el tema. Con arranque puede ser relativamente fácil de crear un diseño elegante. Para las listas de éxitos, se ha optado por la biblioteca javascript {1}. Este es el uso relativamente cómoda, pero tuvimos que hacer un pequeño ajuste con el fin de mostrar los iconos en la lata del eje X.</value>
  </data>
  <data name="PresentationText2" xml:space="preserve">
    <value>Otras tecnologías:</value>
  </data>
  <data name="Region" xml:space="preserve">
    <value>comarca</value>
  </data>
  <data name="RoleStats" xml:space="preserve">
    <value>Estadísticas papeles Rendimiento</value>
  </data>
  <data name="Support" xml:space="preserve">
    <value>Soporte</value>
  </data>
  <data name="Tank" xml:space="preserve">
    <value>tanque</value>
  </data>
  <data name="TearNote" xml:space="preserve">
    <value>La lágrima representa los casos en que el jugador no ha comprado un mercenario.</value>
  </data>
  <data name="Tools" xml:space="preserve">
    <value>instrumentos</value>
  </data>
  <data name="ToolsText1" xml:space="preserve">
    <value>Para el desarrollo, hemos principalmente {0} utilizado. El entorno de desarrollo de Microsoft está disponible de forma gratuita para uso no comercial y hace que el desarrollo de sencilla MVC Webanwednungen muy simple.</value>
  </data>
  <data name="ToolsText2" xml:space="preserve">
    <value>El programa también proporciona una muy simple integración GIT y publicar increíblemente complicada su proyecto en su {0}. Lo que también es muy útil es la capacidad de dibujar todo tipo paquetes Nuget en su proyecto. Todas las bibliotecas que hemos utilizado para el desarrollo del proyecto estaban disponibles en el directorio Nuget.</value>
  </data>
  <data name="TopAvgCS" xml:space="preserve">
    <value>Promedio más alto CS</value>
  </data>
  <data name="TopPickrate" xml:space="preserve">
    <value>Mayor tasa de recogida</value>
  </data>
  <data name="TopWinrate" xml:space="preserve">
    <value>Mayor tasa de ganancias</value>
  </data>
  <data name="Welcome" xml:space="preserve">
    <value>Bienvenidos</value>
  </data>
  <data name="WelcomeText1" xml:space="preserve">
    <value>En nuestra contribución al Desafío API 2.0 queríamos dedicarnos al primer tema posible:</value>
  </data>
  <data name="WelcomeText2" xml:space="preserve">
    <value>Pensamos en qué tipo de información puede ser de interés. Nuestro objetivo principal fue analizar que los mercenarios eran particularmente interesante para los jugadores y si la duración del juego se ha reducido en los esbirros más fuertes.</value>
  </data>
  <data name="WelcomeText3" xml:space="preserve">
    <value>Como además hemos añadido algunas estadísticas más sobre el desempeño de los campeones y artículos individuales.</value>
  </data>
  <data name="Winrate" xml:space="preserve">
    <value>tasa de ganancia</value>
  </data>
  <data name="ConclusionChampions" xml:space="preserve">
    <value>La mayor diferencia sobre todos los campeones es la pérdida significativa en CS allover. Todos los primeros agricultores de agua de sentina son un 20% más baja en la granja.</value>
  </data>
  <data name="ConclusionDuration" xml:space="preserve">
    <value>La duración de los partidos Pantoque es defenitly más rápido. La mayoría de los objetivos se earlyier tomadas, excepto Drake.</value>
  </data>
  <data name="ConclusionMercPopularity" xml:space="preserve">
    <value>Los mercenarios cuerpo a cuerpo parecen ser más popular, pero el ratio de ganancias se distribuye justo. Un gran número suprising de jugadores, no compró un mercenario.</value>
  </data>
  <data name="ConclusionRoles" xml:space="preserve">
    <value>No es gran función de la variedad en el éxito de los diferentes roles. Empuje Minor en el tanque y luchador.</value>
  </data>
</root>