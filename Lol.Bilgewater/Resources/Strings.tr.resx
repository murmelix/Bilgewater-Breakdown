<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="All" xml:space="preserve">
    <value>hepsi</value>
  </data>
  <data name="Assassin" xml:space="preserve">
    <value>katil</value>
  </data>
  <data name="Assists" xml:space="preserve">
    <value>asist</value>
  </data>
  <data name="Champions" xml:space="preserve">
    <value>Şampiyonlar</value>
  </data>
  <data name="Charts" xml:space="preserve">
    <value>Grafikler</value>
  </data>
  <data name="Close" xml:space="preserve">
    <value>Kapat</value>
  </data>
  <data name="CS" xml:space="preserve">
    <value>CS</value>
  </data>
  <data name="DataProcessing" xml:space="preserve">
    <value>Veri işleme</value>
  </data>
  <data name="DataText1" xml:space="preserve">
    <value>Riot Api verileri işlemek için, biz tek tek veri nesneleri gösteren küçük bir kütüphane, yazdı. Daha sonra öğrendim, böyle bir şeyin zaten vardı.</value>
  </data>
  <data name="DataText2" xml:space="preserve">
    <value>Birçok maç verilerini yüklemek için, bir parametre olarak API anahtarı ve bir bölge devraldı küçük bir konsol programı yazdı. Sen indirme işlemini hızlandırmak için programın birden çok örneği başlayabiliriz. Veriler daha sonra kütüphane ile yer kazanmak için sıkıştırılmış {0}</value>
  </data>
  <data name="DataText3" xml:space="preserve">
    <value>Nispeten komple maç bilgilerinden önemli veri ayıklamak için, ikinci bir konsol programı yazdı. Bu, yalnızca ilginç olarak bizim analiz için düşünülen maç-JSON-Files, tüm veri değerleri ayıklar etti. JSON-Files ayrıştırma için biz kütüphane {1} kullanmışlardır. Bu veriler daha sonra seri hale kütüphane protobuf ile inkübe edilmiştir. {0} Google seri için inanılmaz hızlı ve şık bir yöntemdir. &lt;br /&gt; Bundan sonra, sadece analiz etmek ve küçük örneklerinde veri değerleri değerleri depolamak zorunda kaldı. Bir veritabanı, gerekli değildi.</value>
  </data>
  <data name="Death" xml:space="preserve">
    <value>Ölüm</value>
  </data>
  <data name="Documentation" xml:space="preserve">
    <value>Belgeler</value>
  </data>
  <data name="DurationStats" xml:space="preserve">
    <value>İstatistikler Maç uzunluğu</value>
  </data>
  <data name="FirstBaron" xml:space="preserve">
    <value>İlk Baron</value>
  </data>
  <data name="FirstBlood" xml:space="preserve">
    <value>İlk kan</value>
  </data>
  <data name="FirstDrake" xml:space="preserve">
    <value>İlk Drake</value>
  </data>
  <data name="FirstTower" xml:space="preserve">
    <value>İlk Kulesi</value>
  </data>
  <data name="Items" xml:space="preserve">
    <value>Öğeler</value>
  </data>
  <data name="Kills" xml:space="preserve">
    <value>Ölü</value>
  </data>
  <data name="LetsGo" xml:space="preserve">
    <value>Haydi gidelim</value>
  </data>
  <data name="LowesPickrate" xml:space="preserve">
    <value>en düşük Pickrate</value>
  </data>
  <data name="LowestAvgCS" xml:space="preserve">
    <value>en düşük Avg CS</value>
  </data>
  <data name="LowestWinrate" xml:space="preserve">
    <value>en düşük Winrate</value>
  </data>
  <data name="Mage" xml:space="preserve">
    <value>sihirbaz</value>
  </data>
  <data name="Marksman" xml:space="preserve">
    <value>nişancı</value>
  </data>
  <data name="MercPopularity" xml:space="preserve">
    <value>Mercenary Popülerlik</value>
  </data>
  <data name="OnlyBilgewater" xml:space="preserve">
    <value>sadece Bilgewater</value>
  </data>
  <data name="Pickrate" xml:space="preserve">
    <value>Pickrate</value>
  </data>
  <data name="Presentation" xml:space="preserve">
    <value>sunuş</value>
  </data>
  <data name="PresentationText1" xml:space="preserve">
    <value>Sitenin tasarımı için, Tema {0} kullanın. Bootstrap ile şık bir düzen oluşturmak için nispeten kolay olabilir. Grafikleri için, javascript kütüphanesinden {1} için seçtiniz. Bu nispeten rahat kullanmak için, ama biz X ekseni can simgeleri görüntülemek için küçük bir ayarlama yapmak zorunda kaldı.</value>
  </data>
  <data name="PresentationText2" xml:space="preserve">
    <value>Ek teknolojiler</value>
  </data>
  <data name="Region" xml:space="preserve">
    <value>yöre</value>
  </data>
  <data name="RoleStats" xml:space="preserve">
    <value>İstatistikler Rol performansı</value>
  </data>
  <data name="Support" xml:space="preserve">
    <value>yardım</value>
  </data>
  <data name="Tank" xml:space="preserve">
    <value>Tank</value>
  </data>
  <data name="TearNote" xml:space="preserve">
    <value>Gözyaşı oyuncu mercanaries herhangi açmadı durumları temsil eder.</value>
  </data>
  <data name="Tools" xml:space="preserve">
    <value>Araçlar</value>
  </data>
  <data name="ToolsText1" xml:space="preserve">
    <value>Kalkınma için biz ağırlıklı olarak kullanılan {0}. Microsoft formu geliştirme ortamı hiçbir ticari projelerde, ücretsiz olarak kullanılabilir. Bu çok kolay MVC web uygulamaları geliştirme yapar.</value>
  </data>
  <data name="ToolsText2" xml:space="preserve">
    <value>Programm bir çok basit GIT-Entegrasyon ve komplikasyon olmadan projeyi yayımlamak için bir seçenek sunuyor yanında senin {0}. Ayrıca her ek kütüphane projesinde Nuget entegrasyon yoluyla easyly getirilen olabilir. Hepimiz dış kütüphaneleri için yaptım.</value>
  </data>
  <data name="TopAvgCS" xml:space="preserve">
    <value>katil Avg CS</value>
  </data>
  <data name="TopPickrate" xml:space="preserve">
    <value>katil Pickrate</value>
  </data>
  <data name="TopWinrate" xml:space="preserve">
    <value>katil Winrate</value>
  </data>
  <data name="Welcome" xml:space="preserve">
    <value>Hoşgeldiniz</value>
  </data>
  <data name="WelcomeText1" xml:space="preserve">
    <value>API Mücadelesi 2.0 için giriş ile olası konuların 1. adamak istedim:</value>
  </data>
  <data name="WelcomeText2" xml:space="preserve">
    <value>Biz bilgilerin hangi ilginç olabileceğini düşündüm. Birincil hedefimiz gamelength güçlü kölelerinin etkilenecek eğer paralı askerler playerbase arasında en popüler ve hangi analiz etmek oldu.</value>
  </data>
  <data name="WelcomeText3" xml:space="preserve">
    <value>Ek olarak her şampiyon ve ürünün performansı bazı istatistikler ekledi.</value>
  </data>
  <data name="Winrate" xml:space="preserve">
    <value>Winrate</value>
  </data>
  <data name="ConclusionChampions" xml:space="preserve">
    <value>Самая большая разница по всем чемпионам является значительная потеря в CS повторяющийся. Все топ-фермеры в Трюмных Вод около 20% ниже, в ферме.</value>
  </data>
  <data name="ConclusionDuration" xml:space="preserve">
    <value>Продолжительность Трюмных Вод матчей defenitly быстрее. Большинство цели earlyier приняты, за исключением селезня.</value>
  </data>
  <data name="ConclusionMercPopularity" xml:space="preserve">
    <value>В ближнем бою наемники, кажется, более популярны, но винрейт будет справедливо распределены.Удивительно, большое количество игроков, не купить наемника.</value>
  </data>
  <data name="ConclusionRoles" xml:space="preserve">
    <value>Нет большой variancy на успех различных ролей. Малой нажатие на баке и истребителя.</value>
  </data>
</root>