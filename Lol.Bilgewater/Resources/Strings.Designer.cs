//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Lol.Bilgewater.Resources {
    using System;
    
    
    /// <summary>
    ///   Eine stark typisierte Ressourcenklasse zum Suchen von lokalisierten Zeichenfolgen usw.
    /// </summary>
    // Diese Klasse wurde von der StronglyTypedResourceBuilder automatisch generiert
    // -Klasse über ein Tool wie ResGen oder Visual Studio automatisch generiert.
    // Um einen Member hinzuzufügen oder zu entfernen, bearbeiten Sie die .ResX-Datei und führen dann ResGen
    // mit der /str-Option erneut aus, oder Sie erstellen Ihr VS-Projekt neu.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public class Strings {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Strings() {
        }
        
        /// <summary>
        ///   Gibt die zwischengespeicherte ResourceManager-Instanz zurück, die von dieser Klasse verwendet wird.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        public static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("Lol.Bilgewater.Resources.Strings", typeof(Strings).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Überschreibt die CurrentUICulture-Eigenschaft des aktuellen Threads für alle
        ///   Ressourcenzuordnungen, die diese stark typisierte Ressourcenklasse verwenden.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        public static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die All ähnelt.
        /// </summary>
        public static string All {
            get {
                return ResourceManager.GetString("All", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Assassin ähnelt.
        /// </summary>
        public static string Assassin {
            get {
                return ResourceManager.GetString("Assassin", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Assists ähnelt.
        /// </summary>
        public static string Assists {
            get {
                return ResourceManager.GetString("Assists", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Champions ähnelt.
        /// </summary>
        public static string Champions {
            get {
                return ResourceManager.GetString("Champions", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Charts ähnelt.
        /// </summary>
        public static string Charts {
            get {
                return ResourceManager.GetString("Charts", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Close ähnelt.
        /// </summary>
        public static string Close {
            get {
                return ResourceManager.GetString("Close", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die CS ähnelt.
        /// </summary>
        public static string CS {
            get {
                return ResourceManager.GetString("CS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Data processing ähnelt.
        /// </summary>
        public static string DataProcessing {
            get {
                return ResourceManager.GetString("DataProcessing", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Umd die Daten der Riot Api zu verarbeiten haben wir eine kleine Bibliothek geschrieben, welche die einzelen Datenobjekte abbildet. Später erst haben wir herrausgefunden, dass es soetwas schon gibt. ähnelt.
        /// </summary>
        public static string DataText1 {
            get {
                return ResourceManager.GetString("DataText1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Um die vielen Match-Daten zu laden, haben wir ein kleines Konsolen-Programm geschrieben, welches den API-Key und eine Region als Parameter übernimmt. Man konnte mehrere Instanzen des Programmes starten um den Download zu beschleunigen. Die Daten wurden dann um Platz zu sparen mit der Bibilothek {0} komprimiert. ähnelt.
        /// </summary>
        public static string DataText2 {
            get {
                return ResourceManager.GetString("DataText2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Um die wichtigen Daten aus den realtiv Umfangreichen Matchinformationen zu extrahieren, haben wir ein zweites Konsolen-Programm geschrieben. Dieses hat erst alle Datenwerte aus dem Match-JSON-Files extrahiert, welche wir für unsere Auswertung als interessant erachteten.  Für das Parsen der JSON-Files haben wir die Bibliothek {1} verwendet. Die Daten wurden dann mit der Protobuf Bibilothek Serialisiert. {0} ist eine unheimlich schnelle und schlanke Methode für Serialisierung von Google.&lt;br /&gt;Danach mussten w [Rest der Zeichenfolge wurde abgeschnitten]&quot;; ähnelt.
        /// </summary>
        public static string DataText3 {
            get {
                return ResourceManager.GetString("DataText3", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Death ähnelt.
        /// </summary>
        public static string Death {
            get {
                return ResourceManager.GetString("Death", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Documentation ähnelt.
        /// </summary>
        public static string Documentation {
            get {
                return ResourceManager.GetString("Documentation", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Statistics Matchlength ähnelt.
        /// </summary>
        public static string DurationStats {
            get {
                return ResourceManager.GetString("DurationStats", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Fighter ähnelt.
        /// </summary>
        public static string Fighter {
            get {
                return ResourceManager.GetString("Fighter", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die First Baron ähnelt.
        /// </summary>
        public static string FirstBaron {
            get {
                return ResourceManager.GetString("FirstBaron", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Firstblood ähnelt.
        /// </summary>
        public static string FirstBlood {
            get {
                return ResourceManager.GetString("FirstBlood", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die First Drake ähnelt.
        /// </summary>
        public static string FirstDrake {
            get {
                return ResourceManager.GetString("FirstDrake", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die First Inhibitor ähnelt.
        /// </summary>
        public static string FirstInhibitor {
            get {
                return ResourceManager.GetString("FirstInhibitor", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die First Tower ähnelt.
        /// </summary>
        public static string FirstTower {
            get {
                return ResourceManager.GetString("FirstTower", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Items ähnelt.
        /// </summary>
        public static string Items {
            get {
                return ResourceManager.GetString("Items", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Kills ähnelt.
        /// </summary>
        public static string Kills {
            get {
                return ResourceManager.GetString("Kills", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Lets go ähnelt.
        /// </summary>
        public static string LetsGo {
            get {
                return ResourceManager.GetString("LetsGo", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Lowest Pickrate ähnelt.
        /// </summary>
        public static string LowesPickrate {
            get {
                return ResourceManager.GetString("LowesPickrate", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Lowest Avg CS ähnelt.
        /// </summary>
        public static string LowestAvgCS {
            get {
                return ResourceManager.GetString("LowestAvgCS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Lowest Winrate ähnelt.
        /// </summary>
        public static string LowestWinrate {
            get {
                return ResourceManager.GetString("LowestWinrate", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Mage ähnelt.
        /// </summary>
        public static string Mage {
            get {
                return ResourceManager.GetString("Mage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Marksman ähnelt.
        /// </summary>
        public static string Marksman {
            get {
                return ResourceManager.GetString("Marksman", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Matchduration ähnelt.
        /// </summary>
        public static string Matchduration {
            get {
                return ResourceManager.GetString("Matchduration", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Mercenary Popularity ähnelt.
        /// </summary>
        public static string MercPopularity {
            get {
                return ResourceManager.GetString("MercPopularity", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die only Bilgewater ähnelt.
        /// </summary>
        public static string OnlyBilgewater {
            get {
                return ResourceManager.GetString("OnlyBilgewater", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Pickrate ähnelt.
        /// </summary>
        public static string Pickrate {
            get {
                return ResourceManager.GetString("Pickrate", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Presentation ähnelt.
        /// </summary>
        public static string Presentation {
            get {
                return ResourceManager.GetString("Presentation", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Für das Design der Website verwenden wir {0} mit dem Theme . Mit Bootstrap lässt sich relativ einfach ein schickes Layout erstellen. Für die Charts haben wir uns für die Javascript-Bibliothek {1} entschieden. Diese ist relativ komfortable zu benutzen, allerdings mussten wir eine kleine Anpassung vornehmen, um die Icons in der X-Achse anzeigen zu können. ähnelt.
        /// </summary>
        public static string PresentationText1 {
            get {
                return ResourceManager.GetString("PresentationText1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Additional technologies ähnelt.
        /// </summary>
        public static string PresentationText2 {
            get {
                return ResourceManager.GetString("PresentationText2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Region ähnelt.
        /// </summary>
        public static string Region {
            get {
                return ResourceManager.GetString("Region", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Statistics Roleperformance ähnelt.
        /// </summary>
        public static string RoleStats {
            get {
                return ResourceManager.GetString("RoleStats", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Support ähnelt.
        /// </summary>
        public static string Support {
            get {
                return ResourceManager.GetString("Support", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Tank ähnelt.
        /// </summary>
        public static string Tank {
            get {
                return ResourceManager.GetString("Tank", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die The tear represents the cases where the player didn&apos;t pick any of the mercanaries. ähnelt.
        /// </summary>
        public static string TearNote {
            get {
                return ResourceManager.GetString("TearNote", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Tools ähnelt.
        /// </summary>
        public static string Tools {
            get {
                return ResourceManager.GetString("Tools", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die For development we mainly user {0}. The development environment form Microsoft is available for free, in no-commercial projects.  It makes developing MVC Webapplications  very easy. ähnelt.
        /// </summary>
        public static string ToolsText1 {
            get {
                return ResourceManager.GetString("ToolsText1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Besides the programm offers an very simple GIT-Integration and an option to publish your project without complications on your {0}. Also every additional library can be easyly fetched via nuget integration in your project. We did it for all our external libraries. ähnelt.
        /// </summary>
        public static string ToolsText2 {
            get {
                return ResourceManager.GetString("ToolsText2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Top Avg CS ähnelt.
        /// </summary>
        public static string TopAvgCS {
            get {
                return ResourceManager.GetString("TopAvgCS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Top Pickrate ähnelt.
        /// </summary>
        public static string TopPickrate {
            get {
                return ResourceManager.GetString("TopPickrate", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Top Winrate ähnelt.
        /// </summary>
        public static string TopWinrate {
            get {
                return ResourceManager.GetString("TopWinrate", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Welcome ähnelt.
        /// </summary>
        public static string Welcome {
            get {
                return ResourceManager.GetString("Welcome", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die With our entry for the API-Challenge 2.0 we wanted to dedicate to the 1. of possible topics: ähnelt.
        /// </summary>
        public static string WelcomeText1 {
            get {
                return ResourceManager.GetString("WelcomeText1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die We thought about which of the informations might be interesting. Our primary goal was to analyse which mercenaries were most popular among the playerbase and if the gamelength would be affected by stronger minions. ähnelt.
        /// </summary>
        public static string WelcomeText2 {
            get {
                return ResourceManager.GetString("WelcomeText2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die As an addition we added some statistics from performance of every champ and item. ähnelt.
        /// </summary>
        public static string WelcomeText3 {
            get {
                return ResourceManager.GetString("WelcomeText3", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Winrate ähnelt.
        /// </summary>
        public static string Winrate {
            get {
                return ResourceManager.GetString("Winrate", resourceCulture);
            }
        }
    }
}
