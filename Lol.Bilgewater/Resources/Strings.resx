<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="All" xml:space="preserve">
    <value>All</value>
  </data>
  <data name="Assassin" xml:space="preserve">
    <value>Assassin</value>
  </data>
  <data name="Assists" xml:space="preserve">
    <value>Assists</value>
  </data>
  <data name="Champions" xml:space="preserve">
    <value>Champions</value>
  </data>
  <data name="Charts" xml:space="preserve">
    <value>Charts</value>
  </data>
  <data name="Close" xml:space="preserve">
    <value>Close</value>
  </data>
  <data name="CS" xml:space="preserve">
    <value>CS</value>
  </data>
  <data name="DataProcessing" xml:space="preserve">
    <value>Data processing</value>
  </data>
  <data name="DataText1" xml:space="preserve">
    <value>Umd die Daten der Riot Api zu verarbeiten haben wir eine kleine Bibliothek geschrieben, welche die einzelen Datenobjekte abbildet. Später erst haben wir herrausgefunden, dass es soetwas schon gibt.</value>
  </data>
  <data name="DataText2" xml:space="preserve">
    <value>Um die vielen Match-Daten zu laden, haben wir ein kleines Konsolen-Programm geschrieben, welches den API-Key und eine Region als Parameter übernimmt. Man konnte mehrere Instanzen des Programmes starten um den Download zu beschleunigen. Die Daten wurden dann um Platz zu sparen mit der Bibilothek {0} komprimiert.</value>
  </data>
  <data name="DataText3" xml:space="preserve">
    <value>Um die wichtigen Daten aus den realtiv Umfangreichen Matchinformationen zu extrahieren, haben wir ein zweites Konsolen-Programm geschrieben. Dieses hat erst alle Datenwerte aus dem Match-JSON-Files extrahiert, welche wir für unsere Auswertung als interessant erachteten.  Für das Parsen der JSON-Files haben wir die Bibliothek {1} verwendet. Die Daten wurden dann mit der Protobuf Bibilothek Serialisiert. {0} ist eine unheimlich schnelle und schlanke Methode für Serialisierung von Google.&lt;br /&gt;Danach mussten wir die Datenwerte nur noch analysieren und die Werte in kleinen Samples speichern. Eine Datenbank war nicht notwendig.</value>
  </data>
  <data name="Death" xml:space="preserve">
    <value>Death</value>
  </data>
  <data name="Documentation" xml:space="preserve">
    <value>Documentation</value>
  </data>
  <data name="DurationStats" xml:space="preserve">
    <value>Statistics Matchlength</value>
  </data>
  <data name="Fighter" xml:space="preserve">
    <value>Fighter</value>
  </data>
  <data name="FirstBaron" xml:space="preserve">
    <value>First Baron</value>
  </data>
  <data name="FirstBlood" xml:space="preserve">
    <value>Firstblood</value>
  </data>
  <data name="FirstDrake" xml:space="preserve">
    <value>First Drake</value>
  </data>
  <data name="FirstInhibitor" xml:space="preserve">
    <value>First Inhibitor</value>
  </data>
  <data name="FirstTower" xml:space="preserve">
    <value>First Tower</value>
  </data>
  <data name="Items" xml:space="preserve">
    <value>Items</value>
  </data>
  <data name="Kills" xml:space="preserve">
    <value>Kills</value>
  </data>
  <data name="LetsGo" xml:space="preserve">
    <value>Lets go</value>
  </data>
  <data name="LowesPickrate" xml:space="preserve">
    <value>Lowest Pickrate</value>
  </data>
  <data name="LowestAvgCS" xml:space="preserve">
    <value>Lowest Avg CS</value>
  </data>
  <data name="LowestWinrate" xml:space="preserve">
    <value>Lowest Winrate</value>
  </data>
  <data name="Mage" xml:space="preserve">
    <value>Mage</value>
  </data>
  <data name="Marksman" xml:space="preserve">
    <value>Marksman</value>
  </data>
  <data name="Matchduration" xml:space="preserve">
    <value>Matchduration</value>
  </data>
  <data name="MercPopularity" xml:space="preserve">
    <value>Mercenary Popularity</value>
  </data>
  <data name="OnlyBilgewater" xml:space="preserve">
    <value>only Bilgewater</value>
  </data>
  <data name="Pickrate" xml:space="preserve">
    <value>Pickrate</value>
  </data>
  <data name="Presentation" xml:space="preserve">
    <value>Presentation</value>
  </data>
  <data name="PresentationText1" xml:space="preserve">
    <value>Für das Design der Website verwenden wir {0} mit dem Theme . Mit Bootstrap lässt sich relativ einfach ein schickes Layout erstellen. Für die Charts haben wir uns für die Javascript-Bibliothek {1} entschieden. Diese ist relativ komfortable zu benutzen, allerdings mussten wir eine kleine Anpassung vornehmen, um die Icons in der X-Achse anzeigen zu können.</value>
  </data>
  <data name="PresentationText2" xml:space="preserve">
    <value>Additional technologies</value>
  </data>
  <data name="Region" xml:space="preserve">
    <value>Region</value>
  </data>
  <data name="RoleStats" xml:space="preserve">
    <value>Statistics Roleperformance</value>
  </data>
  <data name="Support" xml:space="preserve">
    <value>Support</value>
  </data>
  <data name="Tank" xml:space="preserve">
    <value>Tank</value>
  </data>
  <data name="TearNote" xml:space="preserve">
    <value>The tear represents the cases where the player didn't pick any of the mercanaries.</value>
  </data>
  <data name="Tools" xml:space="preserve">
    <value>Tools</value>
  </data>
  <data name="ToolsText1" xml:space="preserve">
    <value>For development we mainly user {0}. The development environment form Microsoft is available for free, in no-commercial projects.  It makes developing MVC Webapplications  very easy.</value>
  </data>
  <data name="ToolsText2" xml:space="preserve">
    <value>Besides the programm offers an very simple GIT-Integration and an option to publish your project without complications on your {0}. Also every additional library can be easyly fetched via nuget integration in your project. We did it for all our external libraries.</value>
  </data>
  <data name="TopAvgCS" xml:space="preserve">
    <value>Top Avg CS</value>
  </data>
  <data name="TopPickrate" xml:space="preserve">
    <value>Top Pickrate</value>
  </data>
  <data name="TopWinrate" xml:space="preserve">
    <value>Top Winrate</value>
  </data>
  <data name="Welcome" xml:space="preserve">
    <value>Welcome</value>
  </data>
  <data name="WelcomeText1" xml:space="preserve">
    <value>With our entry for the API-Challenge 2.0 we wanted to dedicate to the 1. of possible topics:</value>
  </data>
  <data name="WelcomeText2" xml:space="preserve">
    <value>We thought about which of the informations might be interesting. Our primary goal was to analyse which mercenaries were most popular among the playerbase and if the gamelength would be affected by stronger minions.</value>
  </data>
  <data name="WelcomeText3" xml:space="preserve">
    <value>As an addition we added some statistics from performance of every champ and item.</value>
  </data>
  <data name="Winrate" xml:space="preserve">
    <value>Winrate</value>
  </data>
</root>